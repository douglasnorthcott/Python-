From keras.layers import Input, Dense

in_tensor = Input(shape= (3,))

out_tensor = Dense(1)(in_tensor)

from keras.models import Model

model = Model(in_tennsor, out_tensor)

model.compile(optimizer = 'adam',  loss= 'mae')

train_X = train_data[['home', 'seed_diff', 'pred']]

train_y = train_data['score_diff']

model.evaluate(test_X, test_y)

### Models with 2 outputs

from keras.layers import Input, Concatenate, Dense

input_tensor= Input(shape= (1,))

output_tensor= Dense(2)(input_tensor)

from keras.models import Model

model = Model(input_tensor, output_tensor)

model.compile(optimizer='adam', loss= 'mean_absolute_error')

X= games_tourney_train[['seed_diff']]

y= games_tourney_train[['score_1', 'score_2']]

model.fit(X, y, epochs=500)

model.get_weight()

X= games_tourney_test[['seed_diff']]

y= games_tourney_test[['score_1', 'score_2']]

model.evaluate(X,y)

### Build a regressor/classifier

from keras.layers import Input, Dense

input_tensor =  Input(shapee=(1,))

output_tensor_reg = Dense(1)(input_tensor)

output_tensor_class = Dense(1, activation = 'sigmoid')(output_tensor_reg)

from keras.models import Model

model = Model(input_tensor, [output_tensor_reg, output_tensor_class])

model.compile(loss = ['mean_absolute_error', 'binary_crossentropy'], optimizer = 'adam')

# Fit the coombination of classifier/reggressor

x = games_tourney_train[['score_diff']]

y_reg = games_tourney_train[['score_diff']]

y_class = gamees_tourney_train[['won']] = games

model.fit9x, [y_reg, y_class], epochs=100)

model.get_weights()

from scipy.special import expit as sigmoid

print(sigmoid(1* 0.13870609 + 0.00734114))

## Evaluate Data

x = games_tourney_test[['seed_diff']]

y_reg = games_tourney_test[['score_diff']]

y_class =  games_tourney_test[['won']]

model.evalluate(x, [y_reg, y_class])


